classdef RMRC < handle
    properties
        %> Robot model
%         model;
        t;                                  % Total time (s) default
        deltaT;                             % Control frequency default
        steps;                              % No. of steps for simulation
        delta;                              % Small angle change
        epsilon;                            % Threshold value for manipulability/Damped Least Squares
        W;                                  % Weighting matrix for the velocity vector
        workspace = [-2 2 -2 2 -0.3 2];   

    end
    
    methods
        %% structor
        function self = RMRC()
%             self.t = 10;             % Total time (s) default
            self.deltaT = 0.02;      % Control frequency default
            self.steps = self.t/self.deltaT;   % No. of steps for simulation
%             self.delta = 2*pi/steps; % Small angle change
            self.epsilon = 0.1;      % Threshold value for manipulability/Damped Least Squares
            self.W = diag([0.1 0.1 0.1 0.1 0.1 0.1]);    % Weighting matrix for the velocity vector
%             workspace = [-2 2 -2 2 -0.3 2];   
        end
        
        %% Movement colinear to given axis
        % Syntax:
        % robot_in = robot to move
        % axis = axis to translate along: 'x' 'y' or 'z' (appostrophe included)
        % location = end effector current pose as homo 4x4 transform
        % displacement = desired travel distance
        function matrix = axial(self, robot_in, axis, location, displacement, time)
            robot = robot_in.model;
            
            m = zeros(self.steps,1);             % Array for Measure of Manipulability
            qMatrix = zeros(self.steps,7);       % Array for joint anglesR
            qdot = zeros(self.steps,7);          % Array for joint velocities
            theta = zeros(3,self.steps);         % Array for roll-pitch-yaw angles
            x = zeros(3,self.steps);             % Array for x-y-z trajectory
            positionError = zeros(3,self.steps); % For plotting trajectory error
            angleError = zeros(3,self.steps);    % For plotting trajectory error
            
            s = lspb(0,1,self.steps);                % Trapezoidal trajectory scalar
            
            loc_x = location(1, 4);
            loc_y = location(2, 4);
            loc_z = location(3, 4);

            rpy = tr2rpy(location);
            loc_r = rpy(1);
            loc_p = rpy(2);
            loc_yw = rpy(3);

            if axis == 'x'
                for i=1:self.steps
                    x(1,i) = ((1-s(i))*loc_x) + (s(i)*(loc_x+displacement)) % Points in x
                    x(2,i) = loc_y; %(1-s(i))*loc_y + s(i)*loc_y; % Points in y
                    x(3,i) = loc_z; %(1-s(i)); % + s(i); % Points in z

                    theta(1,i) = loc_r; %0;                 % Roll angle 
                    theta(2,i) = loc_p; %pi/2; %5*pi/9;            % Pitch angle
                    theta(3,i) = loc_yw; %0;                 % Yaw angle
                end
            end
            if axis == 'y'
                for i=1:self.steps
                    x(1,i) = loc_x; % Points in x
                    x(2,i) = ((1-s(i))*loc_y) + (s(i)*(loc_y+displacement)); % Points in y
                    x(3,i) = loc_z; %(1-s(i)); % + s(i); % Points in z

                    theta(1,i) = loc_r; %0;                 % Roll angle 
                    theta(2,i) = loc_p; %pi/2; %5*pi/9;            % Pitch angle
                    theta(3,i) = loc_yw; %0;                 % Yaw angle
                end
            end
            if axis == 'z'
                for i=1:self.steps
                    x(1,i) = loc_x; % Points in x
                    x(2,i) = loc_y; % Points in y
                    x(3,i) = ((1-s(i))*loc_z) + (s(i)*(loc_z+displacement)); %(1-s(i)); % + s(i); % Points in z

                    theta(1,i) = loc_r; %0;                 % Roll angle 
                    theta(2,i) = loc_p; %pi/2; %5*pi/9;            % Pitch angle
                    theta(3,i) = loc_yw; %0;                 % Yaw angle
                end
            end
            
%             stg1 = 's(i) calced'

            T = [rpy2r(theta(1,1),theta(2,1),theta(3,1)) x(:,1);zeros(1,3) 1];          % Create transformation of first point and angle
            q0 = zeros(1,7);                                                            % Initial guess for joint angles
            qMatrix(1,:) = robot.ikcon(T,q0);                                            % Solve joint angles to achieve first waypoint

            % 1.4) Track the trajectory with RMRC
            for i = 1:self.steps-1
                T = robot.fkine(qMatrix(i,:));                                           % Get forward transformation at current joint state
                deltaX = x(:,i+1) - T(1:3,4);                                         	% Get position error from next waypoint
                Rd = rpy2r(theta(1,i+1),theta(2,i+1),theta(3,i+1));                     % Get next RPY angles, convert to rotation matrix
                Ra = T(1:3,1:3);                                                        % Current end-effector rotation matrix
                Rdot = (1/self.deltaT)*(Rd - Ra);                                                % Calculate rotation matrix error
                S = Rdot*Ra';                                                           % Skew symmetric!
                linear_velocity = (1/self.deltaT)*deltaX;
                angular_velocity = [S(3,2);S(1,3);S(2,1)];                              % Check the structure of Skew Symmetric matrix!!
                deltaTheta = tr2rpy(Rd*Ra');                                            % Convert rotation matrix to RPY angles
                xdot = self.W*[linear_velocity;angular_velocity];                          	% Calculate end-effector velocity to reach next waypoint.
                J = robot.jacob0(qMatrix(i,:));                 % Get Jacobian at current joint state
                m(i) = sqrt(det(J*J'));
                if m(i) < self.epsilon  % If manipulability is less than given threshold
                    lambda = (1 - m(i)/self.epsilon)*5E-2;
                else
                    lambda = 0;
                end
                invJ = inv(J'*J + lambda *eye(7))*J';                                   % DLS Inverse
                qdot(i,:) = (invJ*xdot)';                                                % Solve the RMRC equation (you may need to transpose the         vector)
                for j = 1:7                                                             % Loop through joints 1 to 6
                    if qMatrix(i,j) + self.deltaT*qdot(i,j) < robot.qlim(j,1)                     % If next joint angle is lower than joint limit...
                        qdot(i,j) = 0; % Stop the motor
                    elseif qMatrix(i,j) + self.deltaT*qdot(i,j) > robot.qlim(j,2)                 % If next joint angle is greater than joint limit ...
                        qdot(i,j) = 0; % Stop the motor
                    end
                end
                qMatrix(i+1,:) = qMatrix(i,:) + self.deltaT*qdot(i,:);                         	% Update next joint state based on joint velocities
                positionError(:,i) = x(:,i+1) - T(1:3,4);                               % For plotting
                angleError(:,i) = deltaTheta;                                           % For plotting
            end
            matrix = qMatrix;
%             stg2 = 'rmrc class'

%             for i = 1:self.steps
%               pause(0.01);    
%               robot.animate(qMatrix(i,:)); %Animate plots the arm movement
%               drawnow() %drawnow() displays the arm movement in figure 
%             end
    
        end     %end linear function
        
    end     %%end methods
        
end     %end class
    %% RMRC(axis, displacement)
    % RMRC(z, 0.5)